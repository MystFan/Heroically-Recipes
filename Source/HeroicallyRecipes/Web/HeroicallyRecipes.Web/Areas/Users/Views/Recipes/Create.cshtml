@model HeroicallyRecipes.Web.Models.RecipeViewModels.RecipeCreateViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Users/Views/Shared/_Layout.cshtml";
}

<h2>Create Recipe</h2>

@using (Html.BeginForm("Create", "Recipes", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, string.Empty, new { @class = "text-danger" })

        <div class="form-group">
            @Html.EditorFor(model => model.Title)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Preparation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Preparation, rows: 10, columns: 50, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Preparation, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.Action("All", "Categories")

        <div class="alert alert-warning">
            <strong>Warning!</strong> <br /> The ingredients of the recipe should be arranged as follows shown at right. { measure } { ingredient } ("1/2 cup crème fraîche or sour cream" or "12 large eggs" and ect.)<br />
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ingredients, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="add-ingradients-container">
                @for (int i = 0; i < HeroicallyRecipes.Common.Validation.ModelConstants.IngredientMinCount; i++)
                {
                    <textarea value="Ingradient" name="Ingredients[@i]" cols="50" class="form-control"></textarea>
                    <br />
                }
                @Html.ValidationMessageFor(model => model.Ingredients, "", new { @class = "text-danger" })
            </div>
            <div class="text-center">
                <input type="button" id="btn-add-ingredient" class="btn btn-success" value="Add Ingradient" />
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Images", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="add-images-container">
                @Html.ValidationMessageFor(model => model.RecipeImages, "", new { @class = "text-danger" })
                <input type="file" name="recipeImages" class="form-control" />
            </div>
            <div class="text-center">
                <input type="button" id="btn-add-image" class="btn btn-success" value="Add Image" />
            </div>
        </div>

        <div class="alert alert-warning">
            <strong>Warning!</strong> <br /> Add tags separate by white spaces
        </div>
        <div class="form-group">
            @Html.Label("Tags", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="add-images-container">
                @Html.TextBoxFor(model => model.Tags, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10" id="add-ingradients-container">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
}

@section scripts{
    <script src="~/Scripts/recipeUpload.js"></script>
}
